"use client";
import {
    useLayoutEffect2
} from "/node_modules/.vite/deps/chunk-DTZN7E7W.js?v=945e8a00";
import {
    useCallbackRef
} from "/node_modules/.vite/deps/chunk-JJB46HNC.js?v=945e8a00";
import {
    createContextScope
} from "/node_modules/.vite/deps/chunk-AW5DZGYL.js?v=945e8a00";
import {
    Primitive
} from "/node_modules/.vite/deps/chunk-GNDDWKF2.js?v=945e8a00";
import "/node_modules/.vite/deps/chunk-DSLBH2Y5.js?v=945e8a00";
import {
    require_jsx_runtime
} from "/node_modules/.vite/deps/chunk-OT5EQO2H.js?v=945e8a00";
import "/node_modules/.vite/deps/chunk-3LEBMX3J.js?v=945e8a00";
import {
    require_react
} from "/node_modules/.vite/deps/chunk-OU5AQDZK.js?v=945e8a00";
import {
    __toESM
} from "/node_modules/.vite/deps/chunk-EWTE5DHJ.js?v=945e8a00";

// node_modules/@radix-ui/react-avatar/dist/index.mjs
var React = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var AVATAR_NAME = "Avatar";
var [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);
var [AvatarProvider, useAvatarContext] = createAvatarContext(AVATAR_NAME);
var Avatar = React.forwardRef(
    (props, forwardedRef) => {
        const {
            __scopeAvatar,
            ...avatarProps
        } = props;
        const [imageLoadingStatus, setImageLoadingStatus] = React.useState("idle");
        return (0, import_jsx_runtime.jsx)(
            AvatarProvider, {
                scope: __scopeAvatar,
                imageLoadingStatus,
                onImageLoadingStatusChange: setImageLoadingStatus,
                children: (0, import_jsx_runtime.jsx)(Primitive.span, { ...avatarProps,
                    ref: forwardedRef
                })
            }
        );
    }
);
Avatar.displayName = AVATAR_NAME;
var IMAGE_NAME = "AvatarImage";
var AvatarImage = React.forwardRef(
    (props, forwardedRef) => {
        const {
            __scopeAvatar,
            src,
            onLoadingStatusChange = () => {},
            ...imageProps
        } = props;
        const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);
        const imageLoadingStatus = useImageLoadingStatus(src);
        const handleLoadingStatusChange = useCallbackRef((status) => {
            onLoadingStatusChange(status);
            context.onImageLoadingStatusChange(status);
        });
        useLayoutEffect2(() => {
            if (imageLoadingStatus !== "idle") {
                handleLoadingStatusChange(imageLoadingStatus);
            }
        }, [imageLoadingStatus, handleLoadingStatusChange]);
        return imageLoadingStatus === "loaded" ? (0, import_jsx_runtime.jsx)(Primitive.img, { ...imageProps,
            ref: forwardedRef,
            src
        }) : null;
    }
);
AvatarImage.displayName = IMAGE_NAME;
var FALLBACK_NAME = "AvatarFallback";
var AvatarFallback = React.forwardRef(
    (props, forwardedRef) => {
        const {
            __scopeAvatar,
            delayMs,
            ...fallbackProps
        } = props;
        const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);
        const [canRender, setCanRender] = React.useState(delayMs === void 0);
        React.useEffect(() => {
            if (delayMs !== void 0) {
                const timerId = window.setTimeout(() => setCanRender(true), delayMs);
                return () => window.clearTimeout(timerId);
            }
        }, [delayMs]);
        return canRender && context.imageLoadingStatus !== "loaded" ? (0, import_jsx_runtime.jsx)(Primitive.span, { ...fallbackProps,
            ref: forwardedRef
        }) : null;
    }
);
AvatarFallback.displayName = FALLBACK_NAME;

function useImageLoadingStatus(src) {
    const [loadingStatus, setLoadingStatus] = React.useState("idle");
    useLayoutEffect2(() => {
        if (!src) {
            setLoadingStatus("error");
            return;
        }
        let isMounted = true;
        const image = new window.Image();
        const updateStatus = (status) => () => {
            if (!isMounted) return;
            setLoadingStatus(status);
        };
        setLoadingStatus("loading");
        image.onload = updateStatus("loaded");
        image.onerror = updateStatus("error");
        image.src = src;
        return () => {
            isMounted = false;
        };
    }, [src]);
    return loadingStatus;
}
var Root = Avatar;
var Image = AvatarImage;
var Fallback = AvatarFallback;
export {
    Avatar,
    AvatarFallback,
    AvatarImage,
    Fallback,
    Image,
    Root,
    createAvatarScope
};
//# sourceMappingURL=@radix-ui_react-avatar.js.map